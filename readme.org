#+title: quantile-charts

Templates for charting quantile information.

Data is usually a time series in the form of a [Double] for each time period.

#+begin_src haskell
:set prompt "> "
:set -XOverloadedStrings
:set -XOverloadedLabels
:set -Wno-type-defaults
:set -Wno-name-shadowing
import qualified Data.Text as Text
import Data.Bifunctor
import NumHask.Space
#+end_src

Using normal distribution to generate example data:


\[
f(x)= {\frac{1}{\sigma\sqrt{2\pi}}}e^{- {\frac {1}{2}} (\frac {x-\mu}{\sigma})^2}
\]

#+begin_src haskell
import Statistics.Distribution
import Statistics.Distribution.Normal

simQs = (\y -> qua 0 1 <$> [1 .. 4] <*> pure y) <$> [0.01,0.1,0.25,0.5]
simQs
#+end_src

#+RESULTS:
|  -2.326347874040841 |  -3.289952714266375 |  -4.02935271391858 |  -4.652695748081682 |
| -1.2815515655446004 | -1.8123876048736467 | -2.219712424042684 | -2.5631031310892007 |
| -0.6744897501960819 | -0.9538725524089402 | -1.168250516524054 | -1.3489795003921639 |
|                 0.0 |                 0.0 |                0.0 |                 0.0 |

#+begin_src haskell
qs = [0.01,0.1,0.25,0.5,0.75,0.9,0.99]
simQs = (\y -> qua 0 1 <$> grid OuterPos (Range 0 5) 100 <*> pure y) <$> qs
c = Colour 0.85 0 0.3 0.5
#+end_src

#+begin_src haskell :file other/quantile.svg :results output graphics file :exports both
writeChartSvg "other/quantile.svg" $ quantileChart (Text.pack . show <$> qs) (qLines 0.01 (length qs) c) [defaultAxisOptions, defaultAxisOptions & #place .~ PlaceLeft] simQs & #hudOptions %~ colourHudOptions (rgb light) & #hudOptions % #legends %~ fmap (second (#content %~ (("quantile",BlankChart [one]):)))
#+end_src

#+RESULTS:
[[file:other/quantile.svg]]

#+begin_src haskell :file other/hist.svg :results output graphics file :exports both
import System.Random
import System.Random.Stateful
import qualified Data.List as List

sim n = take n $ List.unfoldr (Just . uniformR (0,1::Double)) (mkStdGen 42)
simNormal n = fmap (Statistics.Distribution.quantile (normalDistr 0 1)) (sim n)
xs = simNormal 10000
writeChartSvg "other/hist.svg" (histChart (Range (-3) 3) 12 xs & #hudOptions %~ colourHudOptions (rgb light) & #hudOptions % #frames .~ [(20,defaultFrameOptions & #buffer .~ 0.1)])
#+end_src

#+RESULTS:
[[file:other/hist.svg]]

Histogram components

#+begin_src haskell :results output
r = Range (-3) 3
g = 6

hcuts = grid OuterPos r g :: [Double]
print hcuts

h = fill hcuts xs
print h

hr = (\(Rect x x' _ _) -> (x + x') / 2) <$> makeRects (IncludeOvers (width r / fromIntegral g)) h
print hr
#+end_src

#+RESULTS:
:
: > > > [-3.0,-2.0,-1.0,0.0,1.0,2.0,3.0]
: > > Histogram {cuts = [-3.0,-2.0,-1.0,0.0,1.0,2.0,3.0], values = fromList [(1,2.0),(2,12.0),(3,36.0),(4,28.0),(5,21.0),(6,1.0)]}
: > > [-3.5,-2.5,-1.5,-0.5,0.5,1.5,2.5,3.5]
